[
  {
    "title": "Hello, World",
    "slug": "hello-world",
    "date": "2019-08-01T03:32:22.887Z",
    "description": "Words and stuff.",
    "htmlContent": "<p>Sup, world.\nThis is a test post for this showcasing this blog's capabilities and styling.</p>\n<h2>Headings</h2>\n<p>h1 is not rendered since it refers to the post title.</p>\n<h2>h2</h2>\n<h3>h3</h3>\n<h4>h4</h4>\n<h5>h5</h5>\n<h6>h6</h6>\n<h2>Code</h2>\n<p><code>inline</code> and block:</p>\n<pre><code class=\"language-go\">func handler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"Hello, World\")\n}\n</code></pre>\n<h2>Lists</h2>\n<ul>\n<li>unordered list item</li>\n<li>another unordered list item</li>\n</ul>\n<ol>\n<li>first ordered list item<ul>\n<li>unordered sub-list item</li>\n<li>because details matter.</li>\n</ul></li>\n<li>another item<ol>\n<li>ordered sub-list item</li>\n<li>a single item numbered list is dumb</li>\n</ol></li>\n<li>and another item.</li>\n</ol>\n<h2>Emphasis and Quotes</h2>\n<p><strong>bold</strong>, <em>italics</em>, and <strong>bold-<em>italics</em></strong>, and <del>strikethrough</del></p>\n<blockquote>\n<p>Blockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.</p>\n</blockquote>\n<p>Quote break.</p>\n<blockquote>\n<p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough</p>\n</blockquote>\n<h2>Links</h2>\n<p><a href=\"https://www.google.com\">I'm an inline-style link</a>.</p>\n<h2>Footnotes</h2>\n<p>Here's a test footnote.<sup id=\"fnref-test\"><a href=\"#fn-test\" class=\"footnote-ref\">test</a></sup></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-test\">Test footnote definition.<a href=\"#fnref-test\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>",
    "plainContent": "Sup, world. This is a test post for this showcasing this blog's capabilities and styling. Headings h1 is not rendered since it refers to the post title. h2 h3 h4 h5 h6 Code inline and block: Lists unordered list item another unordered list item first ordered list item unordered sub-list item because details matter. another item ordered sub-list item a single item numbered list is dumb and another item. Emphasis and Quotes bold, italics, and bold-italics, and strikethrough Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough Links I'm an inline-style link. Footnotes Here's a test footnote.",
    "words": 135
  },
  {
    "title": "Colophon",
    "slug": "colophon",
    "date": "2019-08-02T03:32:22.887Z",
    "description": "A technical description of this site.",
    "htmlContent": "<p>What's a colophon, you ask?</p>\n<p>No, not using your colon for music making—I'd expect that to be <em>colon-phony</em>.\nWith respect to printed books, a colophon is a brief description of the printing and publication of the book.\nOn the web though, a colophon serves as a technical description of a site's architecture.</p>\n<p>So, before I forget, here's what's going on behind the scenes and why.</p>\n<h2>Motives</h2>\n<p>My motives behind creating this site include:</p>\n<ul>\n<li>Learn and gain experience. This is twofold:<ol>\n<li>Use modern web technologies in the making of this website.</li>\n<li>Create a digital playground for trying/testing new web technology.\nSuccessful experiments can then be hosted here with minimal deployment pain.</li>\n</ol></li>\n<li>Blog</li>\n<li>Portfolio</li>\n<li>Scummy self-promotion</li>\n</ul>\n<h2>Approach</h2>\n<p>As my own toughest critic, I have tinkered with the design and structure of this site since my junior year of college.\nIt has been an educational experience but also truly frustrating at times.\nIn a constant strive for perfection, I struggle to be satisfied with the result even when it's exactly what I initially set out to produce.</p>\n<p>Rather than work against or around my innate desire for perfection, I chose to embrace it.\nKnowing my future self would want to make changes, I spent a considerable amount of effort up-front learning about website architectures and, eventually, architecting.</p>\n<p>With the aforementioned motives in mind, I held myself to <strong>three vague requirements</strong>:</p>\n<ol>\n<li><strong>Simple aesthetic</strong>⁠—no crazy animations, color schemes, or typography.\nJust clean design.</li>\n<li><strong>Painless iteration</strong>—Declarative infrastructure and configurations with kubernetes, CI/CD, and other quality-of-life tools for managing a stack and its deployment.\nIf I need to make changes, I want them to require as little re-on-boarding and overhead as possible.\nAdditionally, having this infrastructure set up as early as possible (on substantial projects like this one) accelerates development.</li>\n<li><strong>Personal playground</strong>—an environment of boundless possibilities.\nI don't want to tie the entire site to a certain technology.\nFor instance, a basic static site generator doesn't allow me to showoff a visualization project that needs a database on the backend.</li>\n</ol>\n<p><strong>tl;dr</strong>: avoid trends, try potential (r)evolutions.</p>\n<p>Trends are just that: trends.\nThey are supposed to change.\nHowever, black text on a white background is timeless.\nI'm confident my future self will agree and opt to not change it.\nSometimes trends are truly revolutionary (git, kubernetes, etc.) though so never become complacent.</p>\n<h2>Design Decisions</h2>\n<h3>Typography</h3>\n<p>To achieve the site's clean style, typography must do a lot of the aesthetic heavy lifting.\nI chose <a href=\"https://rsms.me/inter/\">Inter</a>, a beautiful typeface \"designed for computer screens\" by <a href=\"https://twitter.com/rsms\">Rasmus Andersson</a>.</p>\n<h3>Color Palette</h3>\n<p>Given the requirements, my color palatte options are quite <em>black and white</em>.\nAnd gray.\nI chose a few saturated colors for some pop.</p>\n<h3>CMS</h3>\n<p>Currently, I simply write blog posts in Markdown and commit it to the same repository as the website frontend.\nThe frontend generates routes and loads a specific Markdown file based on the unique URL slug.\nI plan to eventually investigate other methods of managing my blog content.</p>\n<h2>Open source code</h2>\n<p>This website frontend is a personal project and free to use, modify, and even sell within the bounds of the liberal MIT license.\nYou'll find the most recent version of the frontend at <a href=\"https://github.com/jackfletch/jackfletch.com-frontend\">https://github.com/jackfletch/jackfletch.com-frontend</a>.</p>\n<p>The kubernetes cluster configuration is not published at this time.</p>",
    "plainContent": "What's a colophon, you ask? No, not using your colon for music making—I'd expect that to be colon-phony. With respect to printed books, a colophon is a brief description of the printing and publication of the book. On the web though, a colophon serves as a technical description of a site's architecture. So, before I forget, here's what's going on behind the scenes and why. Motives My motives behind creating this site include: Learn and gain experience. This is twofold: Use modern web technologies in the making of this website. Create a digital playground for trying/testing new web technology. Successful experiments can then be hosted here with minimal deployment pain. Blog Portfolio Scummy self-promotion Approach As my own toughest critic, I have tinkered with the design and structure of this site since my junior year of college. It has been an educational experience but also truly frustrating at times. In a constant strive for perfection, I struggle to be satisfied with the result even when it's exactly what I initially set out to produce. Rather than work against or around my innate desire for perfection, I chose to embrace it. Knowing my future self would want to make changes, I spent a considerable amount of effort up-front learning about website architectures and, eventually, architecting. With the aforementioned motives in mind, I held myself to three vague requirements: Simple aesthetic⁠—no crazy animations, color schemes, or typography. Just clean design. Painless iteration—Declarative infrastructure and configurations with kubernetes, CI/CD, and other quality-of-life tools for managing a stack and its deployment. If I need to make changes, I want them to require as little re-on-boarding and overhead as possible. Additionally, having this infrastructure set up as early as possible (on substantial projects like this one) accelerates development. Personal playground—an environment of boundless possibilities. I don't want to tie the entire site to a certain technology. For instance, a basic static site generator doesn't allow me to showoff a visualization project that needs a database on the backend. tl;dr: avoid trends, try potential (r)evolutions. Trends are just that: trends. They are supposed to change. However, black text on a white background is timeless. I'm confident my future self will agree and opt to not change it. Sometimes trends are truly revolutionary (git, kubernetes, etc.) though so never become complacent. Design Decisions Typography To achieve the site's clean style, typography must do a lot of the aesthetic heavy lifting. I chose Inter, a beautiful typeface \"designed for computer screens\" by Rasmus Andersson. Color Palette Given the requirements, my color palatte options are quite black and white. And gray. I chose a few saturated colors for some pop. CMS Currently, I simply write blog posts in Markdown and commit it to the same repository as the website frontend. The frontend generates routes and loads a specific Markdown file based on the unique URL slug. I plan to eventually investigate other methods of managing my blog content. Open source code This website frontend is a personal project and free to use, modify, and even sell within the bounds of the liberal MIT license. You'll find the most recent version of the frontend at https://github.com/jackfletch/jackfletch.com-frontend. The kubernetes cluster configuration is not published at this time.",
    "words": 536
  },
  {
    "title": "Committime",
    "slug": "committime",
    "date": "2019-08-07T03:33:41.571Z",
    "description": "Ever wanted to quickly change the commit or author date of an unsigned git commit? Worried recruiters will discover your late-night code obsession or your significant other will find why you missed their call by tracking git commit times? Look no further.",
    "htmlContent": "<p><em>Note: This tool will not work with cryptographically signed commits, an industry best practice.</em>\n<em>It is intended to be used with local commits only.</em>\n<em>See <a href=\"https://softwareengineering.stackexchange.com/a/212216\">this stackoverflow answer</a> for a brief overview of why signing commits is important.</em></p>\n<h2>What</h2>\n<p>Git's best and worst features involve changing history.\nAnyone can change <em>commit</em> history.\nIt's good to be aware of how to do so.</p>\n<p>Each commit has an associated author date and committer date.\nA regular <code>git log</code> only shows the author date.\nTo see both a commit's author date and committer date:</p>\n<pre><code class=\"language-sh\">git log --pretty=fuller\n</code></pre>\n<p>Git allows these dates to be changed by rewriting history.\n<strong>Do not use this on public commits (i.e., ones that have already been pushed to a repository) unless you're working solo and have the <code>--force</code></strong>.</p>\n<h2>Why</h2>\n<p>Changing an unsigned git commit's author date or committer date may be seen as a bit questionable.\nHowever, there are scenarios where it may be desirable, and doing so may represent a more accurate git history.</p>\n<p>Suppose you worked all day on a feature but didn't get a chance to clean-up and commit until the next day.\nOr you go on vacation and don't get around to it until the next week.\nOne might argue that you should indicate your committer date as the correct day of work.\nRealistically it doesn't matter; but if it is somewhat trivial to change, a git log could serve as a clear history of when the project was worked on.</p>\n<p>As I try to keep a clean git history, I find it particularly useful on personal projects.</p>\n<h2>How</h2>\n<p>To change the author date of last commit:</p>\n<pre><code class=\"language-sh\">git commit --amend --no-edit --date \"$date\"\n</code></pre>\n<p>To change the committer date of last commit:</p>\n<pre><code class=\"language-sh\">GIT_COMMITTER_DATE=\"$date\" git commit --amend --no-edit\n</code></pre>\n<p>These methods can be combined with a <code>git rebase -i</code> and marking the commit to change with <code>edit</code> to change an arbitrary commit:</p>\n<pre><code class=\"language-sh\">git rebase -i HEAD~3\n# change pick to edit in rebase screen\n# insert above command to change date\ngit rebase --continue\n</code></pre>\n<p>Checkout the <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#_changing_multiple\">git book</a> for more <code>git rebase</code> information.</p>\n<h2>CLI</h2>\n<p>To ease this operation, I created <a href=\"https://github.com/jackfletch/committime\"><code>committime</code></a>:</p>\n<p><img src=\"/static/media/committime/example.png\" alt=\"usage\"></p>\n<p><code>committime</code> shows the user a list of latest commits.\nOnce a commit is selected, <code>committime</code> shows the possible formats of date entry.\nAdditionally, the user can conveniently specify that the author date and committer date should match.\nAfter entering the date(s) for the commit, <code>committime</code> does the heavy lifting.</p>\n<p>Behind the scenes, <code>committime</code> is running a <code>git filter-branch</code> operation to change the environment variables <code>GIT_AUTHOR_DATE</code> and <code>GIT_COMMITTER_DATE</code> for the chosen commit.\n<code>git filter-branch</code> information can be found in the <a href=\"https://git-scm.com/docs/git-filter-branch\">git docs</a> or <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#_the_nuclear_option_filter_branch\">book</a>.</p>\n<h2>Open source code</h2>\n<p><code>committime</code> is a hobby project and free to use, modify, and even sell within the bounds of the liberal MIT license.\nYou'll find the most recent version at <a href=\"https://github.com/jackfletch/committime\">https://github.com/jackfletch/committime</a>.</p>",
    "plainContent": "Note: This tool will not work with cryptographically signed commits, an industry best practice. It is intended to be used with local commits only. See this stackoverflow answer for a brief overview of why signing commits is important. What Git's best and worst features involve changing history. Anyone can change commit history. It's good to be aware of how to do so. Each commit has an associated author date and committer date. A regular git log only shows the author date. To see both a commit's author date and committer date: Git allows these dates to be changed by rewriting history. Do not use this on public commits (i.e., ones that have already been pushed to a repository) unless you're working solo and have the --force. Why Changing an unsigned git commit's author date or committer date may be seen as a bit questionable. However, there are scenarios where it may be desirable, and doing so may represent a more accurate git history. Suppose you worked all day on a feature but didn't get a chance to clean-up and commit until the next day. Or you go on vacation and don't get around to it until the next week. One might argue that you should indicate your committer date as the correct day of work. Realistically it doesn't matter; but if it is somewhat trivial to change, a git log could serve as a clear history of when the project was worked on. As I try to keep a clean git history, I find it particularly useful on personal projects. How To change the author date of last commit: To change the committer date of last commit: These methods can be combined with a git rebase -i and marking the commit to change with edit to change an arbitrary commit: Checkout the git book for more git rebase information. CLI To ease this operation, I created committime:  committime shows the user a list of latest commits. Once a commit is selected, committime shows the possible formats of date entry. Additionally, the user can conveniently specify that the author date and committer date should match. After entering the date(s) for the commit, committime does the heavy lifting. Behind the scenes, committime is running a git filter-branch operation to change the environment variables GIT_AUTHOR_DATE and GIT_COMMITTER_DATE for the chosen commit. git filter-branch information can be found in the git docs or book. Open source code committime is a hobby project and free to use, modify, and even sell within the bounds of the liberal MIT license. You'll find the most recent version at https://github.com/jackfletch/committime.",
    "words": 432
  },
  {
    "title": "Splash",
    "slug": "splash-intro",
    "date": "2019-08-22T16:15:00.000Z",
    "description": "An NBA data visualization for shotcharts and other statistics.",
    "htmlContent": "<p><a href=\"https://splash.jackfletch.com\">Splash</a> is a basketball shooting visualization SPA.</p>\n<p><img src=\"/static/media/splash-intro/interface.png\" alt=\"interface\"></p>\n<p>A product of interests in data data analysis, visualization, and basketball, Splash development began in my fourth semester of college (Spring 2017).</p>\n<h2>Frontend</h2>\n<p>Spring 2017 was the age of <a href=\"https://create-react-app.dev\">Create React App</a>.\nAs such, Splash uses <a href=\"https://reactjs.org\">React</a> to manipulate the DOM.</p>\n<p><a href=\"https://d3js.org\">d3</a> is the de facto JavaScript data visualization library.\nHowever, d3 is largely based on DOM manipulation of geometric shapes.\nTo get d3 to integrate nicely with React, Splash does not use d3 functions that manipulate the DOM.</p>\n<h2>Backend</h2>\n<p>Since I can't watch every NBA game<sup id=\"fnref-nba-time\"><a href=\"#fn-nba-time\" class=\"footnote-ref\">nba-time</a></sup>, Splash's data comes from <a href=\"https://stats.nba.com\">stats.nba.com</a>.\nThe backend uses a local database as a copy of the few endpoints Splash needs in order to cut down on API requests.</p>\n<h2>Inspiration</h2>\n<p>Splash takes notes from <a href=\"https://twitter.com/kirkgoldsberry\">Kirk Goldsberry</a>'s Grantland shotcharts and Austin Clemens's <a href=\"http://www.austinclemens.com/shotcharts/\">Swish</a> shotcharts.</p>\n<h2>Future Work</h2>\n<ul>\n<li>update data with 2018 and 2019 stats (currently only has 2017 data)</li>\n<li>add niftier player selector</li>\n<li>add more charts for other stats</li>\n<li>add player comparison feature</li>\n</ul>\n<h2>Open source code</h2>\n<p>Splash is a hobby project and free to use, modify, and even sell within the bounds of the liberal MIT license.\nYou'll find the most recent version of the frontend at <a href=\"https://github.com/jackfletch/splash\">https://github.com/jackfletch/splash</a>.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-nba-time\">  The NBA has 1230 regular season games at roughly 2 hours per game which is equivalent to 307.5 8-hour days.\nWith the playoffs, that doesn't leave much time for vacation.<a href=\"#fnref-nba-time\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>",
    "plainContent": "Splash is a basketball shooting visualization SPA. interface A product of interests in data data analysis, visualization, and basketball, Splash development began in my fourth semester of college (Spring 2017). Frontend Spring 2017 was the age of Create React App. As such, Splash uses React to manipulate the DOM. d3 is the de facto JavaScript data visualization library. However, d3 is largely based on DOM manipulation of geometric shapes. To get d3 to integrate nicely with React, Splash does not use d3 functions that manipulate the DOM. Backend Since I can't watch every NBA game, Splash's data comes from stats.nba.com. The backend uses a local database as a copy of the few endpoints Splash needs in order to cut down on API requests. Inspiration Splash takes notes from Kirk Goldsberry's Grantland shotcharts and Austin Clemens's Swish shotcharts. Future Work update data with 2018 and 2019 stats (currently only has 2017 data) add niftier player selector add more charts for other stats add player comparison feature Open source code Splash is a hobby project and free to use, modify, and even sell within the bounds of the liberal MIT license. You'll find the most recent version of the frontend at https://github.com/jackfletch/splash.",
    "words": 200
  }
]